load("@rules_cc//cc:defs.bzl", "cc_library")

# toxcore
# =========================================================

cc_library(
    name = "ccompat",
    hdrs = ["toxcore/ccompat.h"],
)

cc_library(
    name = "crypto_core",
    srcs = [
        "toxcore/crypto_core.c",
        "toxcore/crypto_core_mem.c",
    ],
    hdrs = ["toxcore/crypto_core.h"],
    deps = [
        ":ccompat",
        "@libsodium",
    ],
)

cc_library(
    name = "list",
    srcs = ["toxcore/list.c"],
    hdrs = ["toxcore/list.h"],
    deps = [":ccompat"],
)

cc_library(
    name = "logger",
    srcs = ["toxcore/logger.c"],
    hdrs = ["toxcore/logger.h"],
    deps = [":ccompat"],
)

cc_library(
    name = "state",
    srcs = ["toxcore/state.c"],
    hdrs = ["toxcore/state.h"],
    deps = [":logger"],
)

cc_library(
    name = "mono_time",
    srcs = ["toxcore/mono_time.c"],
    hdrs = ["toxcore/mono_time.h"],
    deps = [":ccompat"],
)

cc_library(
    name = "network",
    srcs = [
        "toxcore/network.c",
        "toxcore/util.c",
    ],
    hdrs = [
        "toxcore/network.h",
        "toxcore/util.h",
    ],
    deps = [
        ":ccompat",
        ":crypto_core",
        ":logger",
        ":mono_time",
    ],
)

cc_library(
    name = "ping_array",
    srcs = ["toxcore/ping_array.c"],
    hdrs = ["toxcore/ping_array.h"],
    deps = [":network"],
)

cc_library(
    name = "DHT",
    srcs = [
        "toxcore/DHT.c",
        "toxcore/LAN_discovery.c",
        "toxcore/ping.c",
    ],
    hdrs = [
        "toxcore/DHT.h",
        "toxcore/LAN_discovery.h",
        "toxcore/ping.h",
    ],
    deps = [
        ":crypto_core",
        ":logger",
        ":ping_array",
        ":state",
    ],
)

cc_library(
    name = "onion",
    srcs = ["toxcore/onion.c"],
    hdrs = ["toxcore/onion.h"],
    deps = [":DHT"],
)

cc_library(
    name = "TCP_connection",
    srcs = [
        "toxcore/TCP_client.c",
        "toxcore/TCP_connection.c",
        "toxcore/TCP_server.c",
    ],
    hdrs = [
        "toxcore/TCP_client.h",
        "toxcore/TCP_connection.h",
        "toxcore/TCP_server.h",
    ],
    copts = select({
        "@atox//bazel/tools/config:linux": ["-DTCP_SERVER_USE_EPOLL=1"],
        "//conditions:default": [],
    }),
    deps = [
        ":crypto_core",
        ":list",
        ":onion",
    ],
)

cc_library(
    name = "net_crypto",
    srcs = ["toxcore/net_crypto.c"],
    hdrs = ["toxcore/net_crypto.h"],
    deps = [
        ":DHT",
        ":TCP_connection",
    ],
)

cc_library(
    name = "onion_announce",
    srcs = ["toxcore/onion_announce.c"],
    hdrs = ["toxcore/onion_announce.h"],
    deps = [":onion"],
)

cc_library(
    name = "onion_client",
    srcs = ["toxcore/onion_client.c"],
    hdrs = ["toxcore/onion_client.h"],
    deps = [
        ":net_crypto",
        ":onion_announce",
    ],
)

cc_library(
    name = "friend_connection",
    srcs = ["toxcore/friend_connection.c"],
    hdrs = ["toxcore/friend_connection.h"],
    deps = [
        ":DHT",
        ":net_crypto",
        ":onion_client",
    ],
)

cc_library(
    name = "friend_requests",
    srcs = ["toxcore/friend_requests.c"],
    hdrs = ["toxcore/friend_requests.h"],
    deps = [":friend_connection"],
)

cc_library(
    name = "Messenger",
    srcs = ["toxcore/Messenger.c"],
    hdrs = ["toxcore/Messenger.h"],
    deps = [
        ":friend_requests",
        ":state",
    ],
)

cc_library(
    name = "group",
    srcs = ["toxcore/group.c"],
    hdrs = ["toxcore/group.h"],
    deps = [":Messenger"],
)

cc_library(
    name = "toxcore",
    srcs = [
        "toxcore/tox.c",
        "toxcore/tox.h",
        "toxcore/tox_api.c",
        "toxcore/tox_private.h",
    ],
    hdrs = [
        "toxcore/tox.h",
    ],
    include_prefix = "tox",
    strip_include_prefix = "toxcore",
    visibility = ["//visibility:public"],
    deps = [
        ":group",
        ":toxencryptsave_defines",
    ],
)

# toxencryptsave
# =========================================================

cc_library(
    name = "toxencryptsave_defines",
    hdrs = ["toxencryptsave/defines.h"],
)

cc_library(
    name = "toxencryptsave",
    srcs = [
        "toxencryptsave/toxencryptsave.c",
        "toxencryptsave/toxencryptsave.h",
    ],
    hdrs = ["toxencryptsave/toxencryptsave.h"],
    include_prefix = "tox",
    strip_include_prefix = "toxencryptsave",
    visibility = ["//visibility:public"],
    deps = [
        ":ccompat",
        ":crypto_core",
        ":toxencryptsave_defines",
    ],
)

# toxav
# =========================================================

filegroup(
    name = "toxav_public_headers",
    srcs = ["toxav/toxav.h"],
)

cc_library(
    name = "toxav_public",
    hdrs = [":toxav_public_headers"],
)

cc_library(
    name = "ring_buffer",
    srcs = ["toxav/ring_buffer.c"],
    hdrs = ["toxav/ring_buffer.h"],
    deps = [":ccompat"],
)

cc_library(
    name = "ring_buffer_srcs",
    hdrs = [
        "toxav/ring_buffer.c",
        "toxav/ring_buffer.h",
    ],
    deps = [":ccompat"],
)

cc_library(
    name = "bwcontroller",
    srcs = ["toxav/bwcontroller.c"],
    hdrs = ["toxav/bwcontroller.h"],
    deps = [
        ":Messenger",
        ":ring_buffer",
        ":toxcore",
    ],
)

cc_library(
    name = "rtp",
    srcs = ["toxav/rtp.c"],
    hdrs = ["toxav/rtp.h"],
    deps = [":bwcontroller"],
)

cc_library(
    name = "audio",
    srcs = ["toxav/audio.c"],
    hdrs = ["toxav/audio.h"],
    deps = [
        ":network",
        ":rtp",
        ":toxav_public",
        "@opus",
    ],
)

cc_library(
    name = "video",
    srcs = [
        "toxav/msi.c",
        "toxav/video.c",
    ],
    hdrs = [
        "toxav/msi.h",
        "toxav/video.h",
    ],
    deps = [
        ":audio",
        ":network",
        ":toxav_public",
        "@libvpx",
    ],
)

cc_library(
    name = "groupav",
    srcs = ["toxav/groupav.c"],
    hdrs = ["toxav/groupav.h"],
    deps = [
        ":toxcore",
        "@opus",
    ],
)

cc_library(
    name = "toxav",
    srcs = [
        "toxav/toxav.c",
        "toxav/toxav_old.c",
    ],
    hdrs = [
        "toxav/toxav.api.h",
        "toxav/toxav.h",
    ],
    include_prefix = "tox",
    strip_include_prefix = "toxav",
    visibility = ["//visibility:public"],
    deps = [
        ":groupav",
        ":video",
    ],
)
